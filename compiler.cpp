#include <iostream>
#include <fstream>
#include <map>

#include "Utils.hpp"
#include "Lexer.hpp"
#include "Translator.hpp"


using namespace std;

int main(int argc, char** argv)
{

    if (argc < 2) {
        LogFatal("Not enough arguments");
    }

    map<std::string, bool> options;
    for(int i = 2; i < argc; ++i) {
        std::string sss = argv[i];
        LogInfo("ARGV set: '" + sss + "'");
        options[argv[i]] = true;
    }


    string rawfilename = argv[1];
    string extension = rawfilename.substr(rawfilename.length() - 5, 5);
    if (extension != ".krst") {
        LogFatal("Unsupported file extension '" + extension + "'");
    }
    std::string filename = rawfilename.substr(0, rawfilename.length() - 5);


    ifstream infile(rawfilename);
    string input;
    string tmp;
    while (infile) {
        std::getline(infile, tmp);
        if (tmp.substr(0, 2) != "//") 
            input += tmp + "\n";
        tmp = "";
    }
    infile.close();

    Lexer *lexer = new Lexer(input);
    vector<Token> tokens = lexer->Parse();

    Translator *translator = new Translator(tokens);

    string code = translator->GetCppCode();

    std::string cpp_filename = "_krestikilang_" + filename + ".cpp";
    ofstream file(cpp_filename);

    file << "/*\nCode generated by Krestiki Language Compiler\nmade by Semyon Hoyrish (c) 2023\n*/\n";
    file << code;

    file.close();
        

    std::string answer;
    if (options["compile"]) {
        answer = "y";
        cout << "Compiling" << endl;
    }
    else {
        cout << "Compile? [y/n] ";
        cin >> answer;
    }
    if (answer == "y") {
        if (options["windows"])
            system(("g++ " + cpp_filename + " -o " + filename + ".exe").c_str());
        else if (options["linux"] || options["macos"])
            system(("g++ " + cpp_filename + " -o " + filename).c_str());
        else
            LogError("OS not specified");
    }

    return 0;
}

