#include <iostream>
#include <fstream>

#include "Utils.hpp"
#include "Lexer.hpp"
#include "Translator.hpp"


using namespace std;

int main(int argc, char** argv)
{

    if (argc < 2) {
        LogFatal("Not enough arguments");
    }

    string rawfilename = argv[1];
    //string rawfilename = "test.krst";
    cout << rawfilename << " 111 " << endl;
    string extension = rawfilename.substr(rawfilename.length() - 5, 5);
    if (extension != ".krst") {
        LogFatal("Unsupported file extension '" + extension + "'");
    }
    string filename = rawfilename.substr(0, rawfilename.length() - 5);

    cout << sizeof(Token) << endl;

    cout << 1 << endl;

    ifstream infile(rawfilename);
    string input;
    string tmp;
    while (infile) {
        //infile >> tmp;
        std::getline(infile, tmp);
        if (tmp.substr(0, 2) != "//") 
            input += tmp + "\n";
        tmp = "";
    }
    cout << "!" << input << "!" <<endl;
    infile.close();

    //Lexer *lexer = new Lexer("2 A 7");
    Lexer *lexer = new Lexer(input);
    //Lexer *lexer = new Lexer("~ A )");
    vector<Token> tokens = lexer->Parse();

    Translator *translator = new Translator(tokens);

    string code = translator->GetCppCode();

    cout << code << endl;

    ofstream file("_krestikilang_" + filename + ".cpp");

    file << "/*\nCode generated by Krestiki Language Compiler\nmade by Semyon Hoyrish (c) 2023\n*/\n";
    file << code;

    file.close();
        
    cout << 1 << endl;
    
    return 0;
}

